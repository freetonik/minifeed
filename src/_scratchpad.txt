
//////////////////////////////////
/// loading indicators

        <style>
        @keyframes rotate {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

.htmx-indicator {
opacity: 1;
    }

.rotating-letter, .htmx-indicator {
        transform-origin: center center;
  display: inline-block;
  animation: rotate 1.5s linear infinite;
}
  .htmx-request .htmx-indicator{
        opacity:1;
    }
    .htmx-request.htmx-indicator{
        opacity:1;
        transform-origin: center center;
  display: inline-block;
  animation: rotate 1s linear infinite;
    }

    @keyframes pulsate {

  0, 100% {
    background-color: var(--color-highlight);
  }
  50% {
    background-color: var(--color-green);
  }
}

.pulsating-background {
  animation: pulsate 1s ease-in-out infinite;
}

        </style>

>>>>>>>>> hx-indicator="#spinner"

### TODO: remove uniqueness constraint from items url

```
npx wrangler d1 execute minifeed --local --command="CREATE TABLE IF NOT EXISTS items2 ( item_id INTEGER PRIMARY KEY, created TIMESTAMP DEFAULT CURRENT_TIMESTAMP, feed_id INTEGER NOT NULL, title TEXT NOT NULL, description TEXT, content_html TEXT, content_html_scraped TEXT, url TEXT NOT NULL, pub_date TIMESTAMP, FOREIGN KEY(feed_id) REFERENCES feeds(feed_id) ON DELETE CASCADE );"

npx wrangler d1 execute minifeed --local --command="INSERT INTO items2 SELECT * FROM items;"

npx wrangler d1 execute minifeed --local --command="SELECT * from items2"

npx wrangler d1 execute minifeed --command="ALTER TABLE items RENAME TO items_old;"
npx wrangler d1 execute minifeed --command="ALTER TABLE items2 RENAME TO items;"
```


```
<script>
        var HW_config = {
            selector: "#changelog", // CSS selector where to inject the badge
            account:  "yZwepx",
        }
        </script>
        <script async src="https://cdn.headwayapp.co/widget.js"></script>
        <style>
        #HW_badge_cont {
        display: inline-block;
        }
        #HW_badge_cont:after {
        content: "Changelog";
        display: inline-block;
        margin-left: 2.5em;
        }

        }

        #HW_badge {
              top: 0.4em;
            background-color: #3599db;
        }
        #HW_badge.HW_softHidden {
            top: 0.4em;
            background-color: #b1aaa0;
        }
```

```
app.get('/admin/migrateKV2DB', async (c: Context) => {
    const allSessionsFromKV = await c.env.SESSIONS_KV.list();
    let inner = '';
    console.log(allSessionsFromKV);

    for (const sessionKey of allSessionsFromKV.keys) {
        const session = await c.env.SESSIONS_KV.get(sessionKey.name);
        if (session != null && session !== 'null') {
            const values = session.split(';');
            const userId = Number.parseInt(values[0]);
            // check if sessionKey.name is already in DB
            const existing = await c.env.DB.prepare('SELECT * FROM sessions WHERE session_key = ?')
                .bind(sessionKey.name)
                .first();
            if (existing) {
                inner += `Session ${sessionKey.name} already exists in DB<br>`;
                continue;
            }

            // check if user exists
            const user = await c.env.DB.prepare('SELECT * FROM users WHERE user_id = ?').bind(userId).first();
            if (!user) {
                inner += `User ${userId} does not exist<br>`;
                continue;
            }

            const inserting = await c.env.DB.prepare(
                'INSERT INTO sessions (user_id, session_key) VALUES (?, ?) RETURNING *',
            )
                .bind(userId, sessionKey.name)
                .first();
            if (inserting) {
                inner += `Inserted ${inserting.session_id} - ${inserting.session_key} - ${inserting.user_id}<br>`;
            }
        }
    }
    return c.html(inner);
});
```
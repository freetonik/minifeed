
//////////////////////////////////
/// loading indicators

        <style>
        @keyframes rotate {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

.htmx-indicator {
opacity: 1;
    }

.rotating-letter, .htmx-indicator {
        transform-origin: center center;
  display: inline-block;
  animation: rotate 1.5s linear infinite;
}
  .htmx-request .htmx-indicator{
        opacity:1;
    }
    .htmx-request.htmx-indicator{
        opacity:1;
        transform-origin: center center;
  display: inline-block;
  animation: rotate 1s linear infinite;
    }

    @keyframes pulsate {

  0, 100% {
    background-color: var(--color-highlight);
  }
  50% {
    background-color: var(--color-green);
  }
}

.pulsating-background {
  animation: pulsate 1s ease-in-out infinite;
}

        </style>

>>>>>>>>> hx-indicator="#spinner"

### TODO: remove uniqueness constraint from items url

```
npx wrangler d1 execute minifeed --local --command="CREATE TABLE IF NOT EXISTS items2 ( item_id INTEGER PRIMARY KEY, created TIMESTAMP DEFAULT CURRENT_TIMESTAMP, feed_id INTEGER NOT NULL, title TEXT NOT NULL, description TEXT, content_html TEXT, content_html_scraped TEXT, url TEXT NOT NULL, pub_date TIMESTAMP, FOREIGN KEY(feed_id) REFERENCES feeds(feed_id) ON DELETE CASCADE );"

npx wrangler d1 execute minifeed --local --command="INSERT INTO items2 SELECT * FROM items;"

npx wrangler d1 execute minifeed --local --command="SELECT * from items2"

npx wrangler d1 execute minifeed --command="ALTER TABLE items RENAME TO items_old;"
npx wrangler d1 execute minifeed --command="ALTER TABLE items2 RENAME TO items;"
```
